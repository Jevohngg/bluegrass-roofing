extends ../layouts/portalLayout

block pageStyles
  link(rel="stylesheet" href="/css/portal.css")
  style.
    .iframe-container {
      width: 100%;
      max-width: 800px;
      margin: 1.5rem auto;
      border: 1px solid #ccc;
      box-sizing: border-box;
      position: relative;
      height: 1200px;
    }
    .iframe-container iframe {
      width: 100%;
      height: 100%;
      border: none;
    }
    .sticky-bottom-bar {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      background-color: #ffffff;
      border-top: 1px solid #ccc;
      padding: 1rem;
      display: flex;
      justify-content: center;
      gap: 1rem;
      z-index: 9999;
      flex-direction: row-reverse;
    }
    .btn-loading {
      position: relative;
      color: transparent !important;
      pointer-events: none;
    }
    .btn-loading::after {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      width: 1.2rem;
      height: 1.2rem;
      margin-left: -0.6rem;
      margin-top: -0.6rem;
      border: 2px solid #fff;
      border-top-color: #777;
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

block content
  section.portal-section
    .portal-container
      h2.contract-head Authorization to Contact Insurer (Fill & Sign)

      form#interactiveAciForm(method="POST" action="/portal/sign-aci-interactive")
        //–– pass along the docSendId so the POST can mark it signed
        input(type="hidden" name="docSendId" value=docSendId)
        .iframe-container
          iframe(src="/contracts/aci.html")

    .sticky-bottom-bar
      button.btn.btn-primary(type="submit" id="submitInteractiveAciBtn" form="interactiveAciForm")
        | Submit Document
      a.btn.btn-light(href="/portal") Cancel

block pageScripts
  script.
    (function(){
      // 1) Grab server-passed prefill object and key elements
      const prefilled = !{JSON.stringify(prefilled)};
      const form      = document.getElementById("interactiveAciForm");
      const submitBtn = document.getElementById("submitInteractiveAciBtn");
      const iframe    = document.querySelector(".iframe-container iframe");

      // 2) As soon as the ACI iframe finishes loading, send it the prefill
      if (iframe) {
        iframe.addEventListener("load", function(){
          iframe.contentWindow.postMessage({
            type:    "INITIALIZE_ACI_DATA",
            payload: prefilled
          }, "*");
        });
      }

      // 3) Bail early if form or button missing
      if (!form || !submitBtn) return;

      // 4) On form submit, intercept and request data from the iframe
      form.addEventListener("submit", function(event){
        event.preventDefault();
        if (!iframe || !iframe.contentWindow) {
          alert("ACI document not fully loaded. Please wait and try again.");
          return;
        }
        activateLoadingState();
        window.addEventListener("message", handleChildResponse, { once: true });
        iframe.contentWindow.postMessage({ type: "REQUEST_ACI_DATA" }, "*");
      });

      // 5) Handle the child iframe’s response
      function handleChildResponse(event){
        if (event.data && event.data.type === "ACI_FORM_DATA") {
          const aciData = event.data.payload;
          const missing = findMissingRequired(aciData);
          if (missing.length > 0) {
            alert("Please fill out all required fields:\n" + missing.join(", "));
            deactivateLoadingState();
            return;
          }
          // Include docSendId so server can update the admin-sent record
          aciData.docSendId = prefilled.docSendId || "";
          submitAciData(aciData);
        } else {
          deactivateLoadingState();
        }
      }

      // 6) POST the gathered data to your interactive endpoint
      async function submitAciData(aciData){
        try {
          const resp = await fetch("/portal/sign-aci-interactive", {
            method: "POST",
            headers: {
              "Content-Type":     "application/json",
              "X-Requested-With": "XMLHttpRequest"
            },
            body: JSON.stringify(aciData)
          });
          if (!resp.ok) {
            const errMsg = await resp.text();
            throw new Error(`Server error: ${resp.status} - ${errMsg}`);
          }
          const result = await resp.json();
          if (result.success) {
            window.location.href = "/portal?success=aciSigned";
          } else {
            alert(result.message || "Submission failed. Please try again.");
            deactivateLoadingState();
          }
        } catch (err) {
          console.error("Error submitting ACI data:", err);
          alert("An error occurred while submitting your document.");
          deactivateLoadingState();
        }
      }

      // 7) Validate the required fields
      function findMissingRequired(data) {
        const requiredFields = [
          { key: "clientName",           label: "Client Name(s)" },
          { key: "propertyAddress",      label: "Property Address" },
          { key: "insuranceCompany",     label: "Insurance Company Name" },
          { key: "claimNumber",          label: "Claim Number" },
          { key: "homeowner1PrintedName",label: "Homeowner 1 Printed Name" },
          { key: "signatureHomeowner1",  label: "Homeowner 1 Signature" },
          { key: "homeowner1Date",       label: "Homeowner 1 Date" }
        ];
        const missing = [];
        requiredFields.forEach(field => {
          if (!data[field.key] || !data[field.key].trim()) {
            missing.push(field.label);
          }
        });
        return missing;
      }

      // 8) Loading spinner helpers
      function activateLoadingState(){
        submitBtn.disabled = true;
        submitBtn.classList.add("btn-loading");
      }
      function deactivateLoadingState(){
        submitBtn.disabled = false;
        submitBtn.classList.remove("btn-loading");
      }
    })();
